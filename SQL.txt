	18.11.22

CREATE DATABASE db1
CREATE TABLE Student(
	id int IDENTITY(1,2) PRIMARY KEY,
	LastName varchar(255) NOT NULL,
	FirstName varchar(255) NOT NULL,
	phone char(13),
	mail varchar(100),
	birthDay date,
	grants decimal(6,2)
)

	02.12.22

-- TASK 1
--INSERT INTO Students VALUES ('ПЕРВЫЙ','ПЕРВЫЙ',20,'1@gmail.com','01-01-2002',500),
--('ВТОРОЙ','ВТОРОЙ',21,'2@gmail.com','01-01-2001',1000),
--('ТРЕТИЙ','ТРЕТИЙ',22,'3@gmail.com','01-01-2000',2000),
--('ЧЕТВЁРТЫЙ','ЧЕТВЁРТЫЙ',23,'4@gmail.com','01-01-1999',1500),
--('ПЯТЫЙ','ПЯТЫЙ',24,'5@gmail.com','01-01-1998',1000),
--('ШЕСТОЙ','ШЕСТОЙ',25,'6@gmail.com','01-01-1997',500),
--('СЕДЬМОЙ','СЕДЬМОЙ',21,'7@gmail.com','01-02-2001',1000),
--('ВОСЬМОЙ','ВОСЬМОЙ',22,'8@gmail.com','02-02-2000',2000),
--('ДЕВЯТЫЙ','ДЕВЯТЫЙ',23,'9@gmail.com','03-02-1999',1500),
--('ДЕСЯТЫЙ','ДЕСЯТЫЙ',24,'10@gmail.com','04-02-1998',500)

-- TASK 2.1
--SELECT *
--FROM Students
--WHERE (Age >= 22 AND Age <= 24) AND (Grants >= 800 AND Grants <= 1200)

-- TASK 2.2
--SELECT *
--FROM Students
--WHERE (Age = 22 OR Age = 24) AND Grants <= 1200
--ORDER BY Grants

--SELECT *
--FROM Students
--WHERE [Name] = 'первый' OR [Name] = 'второй'
--SELECT *
--FROM Students
--WHERE [Name] IN ('первый','второй')
--SELECT *
--FROM Students
--WHERE NOT [Name] IN ('первый','второй')

--SELECT *
--FROM Students
--WHERE Birthday BETWEEN '1990-11-01' AND '2000-11-30'
--SELECT *
--FROM Students
--WHERE [Name] BETWEEN 'а' AND 'е'

-- Маски
--SELECT *
--FROM Students
--WHERE [Name] LIKE 'в_____'
--SELECT *
--FROM Students
--WHERE [Name] LIKE 'в%'
--SELECT *
--FROM Students
--WHERE [Name] LIKE '%в_____'
--SELECT *
--FROM Students
--WHERE [Name] LIKE '_[к-о]%' -- второй символ от к до о
--SELECT *
--FROM Students
--WHERE [Name] LIKE '_[^к-о]%' -- второй символ любой кроме символов от к до о
-- [a-днф] = а,б,в,г,д,н,ф - набор символов

-- TASK 3
--INSERT INTO Students VALUES ('Игорь','Иванов',20,'qwe@gmail.com','01-01-2002',500),
--('Игорь Корниенко','ВТОРОЙ',21,'qwer@gmail.com','02-03-2001',1000),
--('Андрей','Тарасов',22,'qwe1@gmail.com','01-06-2000',2000),
--('Иван','Иванов',23,'qwe2@gmail.com','03-04-1999',1500),
--('Иван','Бутенко',24,'qwe3@gmail.com','05-10-1998',1000)
--SELECT *
--FROM Students
--WHERE ([Name] IN ('Андрей','Игорь','Иван')) AND (Surname LIKE '%в') AND (Age BETWEEN 19 AND 25)

--Удаление данных
--SELECT * FROM Students
--DELETE FROM Students WHERE Grants > 1500
--SELECT * FROM Students

--Обновление данных
--SELECT * FROM Students
--UPDATE Students SET Mail = 'over9000@gmail.com' WHERE id = 1002
--SELECT * FROM Students
--SELECT * FROM Students
--UPDATE Students SET Grants = 1500 -- для всех
--SELECT * FROM Students

	09.12.22

--Изменение свойств столбцов
--ALTER TABLE Students ADD PhoneNumber VARCHAR(12)
--ALTER TABLE Students DROP COLUMN PhoneNumber
--UPDATE Students SET PhoneNumber = '+79381210205'
--ALTER TABLE Students ALTER COLUMN PhoneNumber VARCHAR(12) NOT NULL

--Создание вторичного ключа и связывание таблиц
--ALTER TABLE Students ADD GroupId INT
--CREATE TABLE Groups(
--	Id INT PRIMARY KEY IDENTITY(1,1),
--	GroupName VARCHAR(6) NOT NULL UNIQUE
--)
--INSERT INTO Groups VALUES('БВ101'),('БВ111'),('БВ102')
--ALTER TABLE Students ADD FOREIGN KEY(GroupId) REFERENCES Groups(Id)
--UPDATE Students SET GroupId=3 WHERE id=1003

	16.12.22

--Сложные запросы
--SELECT [Name] + ' ' + Surname AS StudName, GroupName
--FROM Students AS S, Groups AS G
--WHERE G.id = S.GroupId AND Grants > 1000
--SELECT * FROM Students
--SELECT * FROM Groups

--TASK 1
--CREATE DATABASE Okey
--CREATE TABLE Brands (
--	id INT PRIMARY KEY IDENTITY(1,1),
--	BrandName VARCHAR(50) UNIQUE NOT NULL
--)
--CREATE TABLE Products (
--	id INT PRIMARY KEY IDENTITY(1,1),
--	ProductName VARCHAR(50) NOT NULL,
--	BrandId INT FOREIGN KEY REFERENCES Brands(id),
--	Price MONEY NOT NULL,
--)
--CREATE TABLE Directors (
--	id INT PRIMARY KEY IDENTITY(1,1),
--	Director VARCHAR(50) NOT NULL,
--	DirectorPhone VARCHAR(12) NOT NULL
--)
--CREATE TABLE Shops (
--	id INT PRIMARY KEY IDENTITY(1,1),
--	Adress VARCHAR(50) NOT NULL UNIQUE,
--	ShopPhone VARCHAR(12) NOT NULL,
--	DirectorId INT FOREIGN KEY REFERENCES Directors(id),
--)
--CREATE TABLE Accaunting (
--	id INT PRIMARY KEY IDENTITY(1,1),
--	ShopId INT FOREIGN KEY REFERENCES Shops(id),
--	ProductId INT FOREIGN KEY REFERENCES Products(id),
--	ProductCount INT NOT NULL
--)
--INSERT INTO Brands VALUES ('бренд 1'),
--('бренд 2')
--INSERT INTO Products VALUES ('Хлеб',1,121),
--('Хлеб',2,250),
--('Молоко',1,180),
--('Кофе',2,250)
--INSERT INTO Directors VALUES ('Максим','89381210205'),
--('Иван','89381211123')
--INSERT INTO Shops VALUES ('aaaaa','321321321',1),
--('bbbbb','123123123',1)
--INSERT INTO Accaunting VALUES (1,1,15),
--(1,2,22),
--(2,1,10),
--(1,3,12),
--(2,4,2),
--(1,4,11),
--(2,2,18)
--SELECT * FROM Brands
--SELECT * FROM Products
--SELECT * FROM Directors
--SELECT * FROM Shops
--SELECT * FROM Accaunting
--SELECT ProductName, Price FROM  Products AS P, Accaunting AS A, Shops AS S
--WHERE P.id = A.ProductId AND A.ShopId = S.id AND S.Adress = 'bbbbb' AND Price > 200
--ORDER BY Price DESC

	23.12.22

--функции агрегирования

--COUNT
--SELECT COUNT (DISTINCT ProductName) AS [Кол-во продуктов] --подсчитываем уникальные позиции
--FROM Products
--SELECT COUNT (DISTINCT BrandId) AS [Кол-во брендов] --подсчитываем уникальные позиции
--FROM Products
--SELECT *
--FROM Products

--AVG
--SELECT AVG (Price) AS [Средняя цена]
--FROM Products
--WHERE ProductName Like 'Хлеб'

--SUM
--SELECT *
--FROM Accaunting
--SELECT SUM(ProductCount) AS [Общее кол-во товаров]
--FROM Accaunting
--WHERE ShopId = 2

--MAX - далее
--MIN - далее

--GROUP BY
--SELECT ProductId, ShopId, SUM(ProductCount) AS SUMMA
--FROM Accaunting
--GROUP BY ProductId, ShopId  -- для корректного отображения, т.к. ProductId много - SUM(ProductCount) один (НЕ СОСТЫКОВЫВАЕТСЯ КОЛ-ВО ЗНАЧЕНИЙ)

-- HAVING
--SELECT ProductId
--FROM Accaunting
--GROUP BY ProductId
--HAVING SUM(ProductCount) > 12 -- чтобы использовать функции агрегирования

--SELECT ProductName
--FROM Products, Accaunting
--WHERE Accaunting.ProductId = Products.id
--GROUP BY ProductName
--HAVING SUM(ProductCount) > 12 

--вложенные запросы
-- то же что и выше, но есть нюанс
--SELECT ProductName
--FROM Products, Accaunting
--WHERE Accaunting.ProductId = Products.id
--GROUP BY ProductName
--HAVING SUM(ProductCount) =
--(
--SELECT MIN (SUMMA) AS [Мин кол-во товара]
--FROM (
--SELECT ProductId, SUM(ProductCount) AS SUMMA
--FROM Accaunting
--GROUP BY ProductId
--) AS SP
--) 

--подсчёт всех товаров во всех магазинах и отображение кол-ва товара, которого меньше всего
--SELECT ProductId, SUM(ProductCount) AS SUMMA
--FROM Accaunting
--GROUP BY ProductId

--SELECT MIN (SUMMA) AS [Мин кол-во товара]
--FROM (
--SELECT ProductId, SUM(ProductCount) AS SUMMA
--FROM Accaunting
--GROUP BY ProductId
--) AS SP

--подсчёт всех товаров во всех магазинах и отображение ID и кол-ва товара, которого меньше всего

--SELECT ProductId, SUM(ProductCount) AS SUMMA
--FROM Accaunting
--GROUP BY ProductId
--HAVING SUM(ProductCount) = (SELECT MIN (SUMMA) AS [Мин кол-во товара] -- чтобы использовать функции агрегирования
--FROM (
--SELECT ProductId, SUM(ProductCount) AS SUMMA
--FROM Accaunting
--GROUP BY ProductId
--) AS SP)

--подсчёт всех товаров во всех магазинах и отображение имени и кол-ва товара, которого меньше всего

--SELECT ProductName
--FROM Products
--WHERE id = (
--SELECT ProductId
--FROM Accaunting
--GROUP BY ProductId
--HAVING SUM(ProductCount) = (SELECT MIN (SUMMA) AS [Мин кол-во товара]
--FROM (
--SELECT ProductId, SUM(ProductCount) AS SUMMA
--FROM Accaunting
--GROUP BY ProductId
--) AS SP)
--)

--task 1
-- вывести Наименования товаров в магазине по конкретному адресу
--SELECT ProductName
--FROM Products
--WHERE id IN (SELECT ProductId
--FROM Accaunting
--WHERE ShopId = (
--SELECT id
--FROM Shops
--WHERE Adress = 'bbbbb'
--))

--task 2
-- адресса магазинов по директору

--SELECT Adress
--FROM Shops
--WHERE DirectorId = (
--SELECT id
--FROM Directors
--WHERE Director = 'Максим'
--)

-- цена и наименование по директору

-- с подзапросами
--SELECT ProductName, Price
--FROM Products
--WHERE id IN (SELECT ProductId
--			 FROM Accaunting
--			 WHERE ShopId IN (SELECT id
--							  FROM Shops
--							  WHERE DirectorId = (SELECT id
--												  FROM Directors
--												  WHERE Director = 'Максим')
											 
--							  )
--			 )
-- в 1 запрос
--SELECT DISTINCT ProductName, Price
--FROM Products AS P, Accaunting AS A, Shops AS S, Directors AS D
--WHERE P.id = A.ProductId AND S.id = A.ShopId AND D.id = S.DirectorId AND Director = 'Максим'

--task 3
-- магазин, в котором меньше всего позиций товара

--SELECT Adress
--FROM Shops
--WHERE id IN (SELECT Shopid
--			 FROM Accaunting
--			 GROUP BY Shopid
--			 HAVING COUNT(ProductCount) = (SELECT MIN (MINIMUM)
--										   FROM (SELECT COUNT(ProductCount) AS MINIMUM
--												 FROM Accaunting
--										   GROUP BY ShopId) AS M
--										   )
--			 )

	13.01.2023

-- 1 подсчитать кол-во магазинов у конкретного директора
-- 2 вывести товары цена которых будет ниже среднего значения товаров в конкретном магазине
-- 3 вывести название товаров по конкретному директору, чтобы не повторялись данные

-- task 1
SELECT COUNT(DirectorId) FROM Shops WHERE DirectorId =
(
	SELECT id FROM Directors WHERE Director = 'Максим'
)

-- task 2
SELECT COUNT(ProductName) FROM Products WHERE Price <
(
	SELECT AVG (Price) FROM Products WHERE id IN
	(
		SELECT ProductId FROM Accaunting WHERE ShopId =
		(
			SELECT id FROM Shops WHERE Adress = 'aaaaa'
		)
	)
)
AND id IN
(
	SELECT ProductId FROM Accaunting WHERE ShopId =
	(
		SELECT id FROM Shops WHERE Adress = 'aaaaa'
	)
)

-- task 3
SELECT DISTINCT ProductName FROM Products WHERE id IN
(
	SELECT ProductId FROM Accaunting WHERE ShopId IN
	(
		SELECT id FROM Shops WHERE DirectorId =
		(
			SELECT id FROM Directors WHERE Director = 'Максим'
		)
	)
)